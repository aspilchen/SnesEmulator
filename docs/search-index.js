var searchIndex = new Map(JSON.parse('[\
["main",{"doc":"","t":"H","n":["main"],"q":[[0,"main"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[1,"tuple"]],"b":[]}],\
["snes",{"doc":"","t":"CCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHISSSSIISSIHHHHHFNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNFONNOOONNNNNOOOONNNNNOOTTTTTFTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["addr","cpu","instructions","memory","multi_register","snes_address","state","status","absolute","absolute_indexed_indirect","absolute_indexed_x","absolute_indexed_y","absolute_indirect","absolute_long","absolute_long_indexed","direct","direct_indexed_indirect","direct_indexed_x","direct_indexed_y","direct_indirect","direct_indirect_indexed","direct_indirect_long","immediate16","pc_relative","pc_relative_long","stack_relative","add_cycles","decrement_stack","execute","fetch_byte","fetch_word","increment_pc","increment_stack","pop_byte","pop_word","push_byte","push_word","read_byte","read_word","write_byte","write_word","adc_61","adc_63","adc_65","adc_67","adc_69","adc_6d","adc_6f","adc_71","adc_72","adc_73","adc_75","adc_77","adc_79","adc_7d","adc_7f","and_21","and_23","and_25","and_27","and_29","and_2d","and_2f","and_31","and_32","and_33","and_35","and_37","and_39","and_3d","and_3f","asl_06","asl_0a","asl_0e","asl_16","asl_1e","bcc_90","bcs_b0","beq_f0","bit_24","bit_2c","bit_34","bit_3c","bit_89","bmi_30","bne_d0","bpl_10","bra_80","brk_00","brl_82","bvc_50","bvs_70","clc_18","cld_d8","cli_58","clv_b8","cmp_c1","cmp_c3","cmp_c5","cmp_c7","cmp_c9","cmp_cd","cmp_cf","cmp_d1","cmp_d2","cmp_d3","cmp_d5","cmp_d7","cmp_d9","cmp_dd","cmp_df","cop_02","cpx_e0","cpx_e4","cpx_ec","cpy_c0","cpy_c4","cpy_cc","dec_3a","dec_c6","dec_ce","dec_d6","dec_de","dex_ca","dey_88","eor_41","eor_43","eor_45","eor_47","eor_49","eor_4d","eor_4f","eor_51","eor_52","eor_53","eor_55","eor_57","eor_59","eor_5d","eor_5f","inc_1a","inc_e6","inc_ee","inc_f6","inc_fe","inx_e8","iny_c8","jmp_4c","jmp_5c","jmp_6c","jmp_7c","jmp_dc","jsr_20","jsr_22","jsr_fc","lda_a1","lda_a3","lda_a5","lda_a7","lda_a9","lda_ad","lda_af","lda_b1","lda_b2","lda_b3","lda_b5","lda_b7","lda_b9","lda_bd","lda_bf","ldx_a2","ldx_a6","ldx_ae","ldx_b6","ldx_be","ldy_a0","ldy_a4","ldy_ac","ldy_b4","ldy_bc","lsr_46","lsr_4a","lsr_4e","lsr_56","lsr_5e","mvn_54","mvp_44","nop_ea","ora_01","ora_03","ora_05","ora_07","ora_09","ora_0d","ora_0f","ora_11","ora_12","ora_13","ora_15","ora_17","ora_19","ora_1d","ora_1f","pea_f4","pei_d4","per_62","pha_48","phb_8b","phd_0b","phk_4b","php_08","phx_da","phy_5a","pla_68","plb_ab","pld_2b","plp_28","plx_fa","ply_7a","rep_c2","rol_26","rol_2a","rol_2e","rol_36","rol_3e","ror_66","ror_6a","ror_6e","ror_76","ror_7e","rti_40","rtl_6b","rts_60","sbc_e1","sbc_e3","sbc_e5","sbc_e7","sbc_e9","sbc_ed","sbc_ef","sbc_f1","sbc_f2","sbc_f3","sbc_f5","sbc_f7","sbc_f9","sbc_fd","sbc_ff","sec_38","sed_f8","sei_78","sep_e2","sta_81","sta_83","sta_85","sta_87","sta_8d","sta_8f","sta_91","sta_92","sta_93","sta_95","sta_97","sta_99","sta_9d","sta_9f","stp_db","stx_86","stx_8e","stx_96","sty_84","sty_8c","sty_94","stz_64","stz_74","stz_9c","stz_9e","tax_aa","tay_a8","tcd_5b","tcs_1b","tdc_7b","trb_14","trb_1c","tsb_04","tsb_0c","tsc_3b","tsx_ba","txa_8a","txs_9a","txy_9b","tya_98","tyx_bb","wai_cb","wdm_42","xba_eb","xce_fb","Address","BITS_IN_BYTE","BITS_IN_WORD","BYTES_IN_LONG","BYTES_IN_WORD","BaseAddress","Byte","MEMORY_MAX","ONE_BYTE","Word","get_byte","get_word","load","put_byte","put_word","MultiRegister","borrow","borrow_mut","default","fmt","from","get_16","get_8","into","set_16","set_8","swap_bytes","try_from","try_into","type_id","SnesAddress","add","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from","from","get_address","get_bank","into","set_address","set_bank","to_owned","try_from","try_into","type_id","State","a","borrow","borrow_mut","cycles","d","dbr","default","fmt","from","get_pbr","into","mem","p","pc","s","set_pbr","to_string","try_from","try_into","type_id","x","y","C","D","I","M","N","Status","V","XB","Z","all","and","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clear_c","clear_d","clear_i","clear_m","clear_n","clear_status_bits","clear_v","clear_x","clear_z","clone","clone_into","cmp","contains","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","full","hash","intersects","into","is_all","is_full","is_none","is_set_c","is_set_m","is_set_n","is_set_v","is_set_x","is_set_z","none","not","not","or","partial_cmp","set_c","set_d","set_i","set_m","set_n","set_status_bits","set_v","set_x","set_z","to_owned","truncate","try_from","try_into","type_id","xor"],"q":[[0,"snes"],[8,"snes::addr"],[26,"snes::cpu"],[41,"snes::instructions"],[297,"snes::memory"],[312,"snes::multi_register"],[327,"snes::snes_address"],[348,"snes::state"],[371,"snes::status"],[446,"alloc::vec"],[447,"core::fmt"],[448,"core::fmt"],[449,"core::any"],[450,"alloc::string"],[451,"core::cmp"],[452,"core::hash"],[453,"core::option"]],"d":["Info","CPU functions such as fetch, read and execute are found …","All CPU instructions are implemented here","Controls memory IO.","","Used to work with 3 byte addresses.","","","Absolute","Todo","Todo","Todo","Todo","Todo","Todo","Direct Page","Todo","Todo","Todo","Todo","Todo","Todo","Immediate","Program counter relative","Todo","stack pointer relative","CPU cycles","Stack pointer","Program execution","Fetches next byte","Memory read","Program counter","Stack pointer","Pop from stack","Pop from stack","Push to stack","Push to stack","Memory read","Memory read","Memory write","Memory writeemory read","Memory read","Load a binary file into memory","Memory write","Memory write","Variable size register","","","","","Returns the argument unchanged.","Get 16 bit value","Get 8 bit value","Calls <code>U::from(self)</code>.","Set 16 bit value","Set 8 bit value","Swap low and high bytes","","","","Three byte address","","","","","","Default constructor","","","Init bank and address","Init whole address","Returns the argument unchanged.","Get address offset (low bytes)","Get address bank (high byte)","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Carry","Decimal mode","IRQ","Memory mode","Negative","Status flags for the CPU","Overflow","In native mode","Zero","Returns a bitmask that contains all values.","Returns the bitwise AND of the bitmask.","","","","","Returns the underlying bits of the bitmask.","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>self</code> contains all values of <code>other</code>.","","","","","","","","Returns the argument unchanged.","","Returns a bitmask that contains all flags.","","Returns <code>true</code> if <code>self</code> intersects with any value in <code>other</code>, …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the bitmask contains all values.","Returns <code>true</code> if the bitmask contains all flags.","Returns <code>true</code> if the bitmask does not contain any values.","","","","","","","Returns a bitmask that does not contain any values.","","Returns the bitwise NOT of the bitmask.","Returns the bitwise OR of the bitmask.","","","","","","","","","","","","Returns a bitmask that only has bits corresponding to flags","","","","Returns the bitwise XOR of the bitmask."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19],"f":[0,0,0,0,0,0,0,0,[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[[1,3],4],[[1,5],4],[[1,6],4],[1,6],[1,5],[[1,5],4],[[1,5],4],[1,6],[1,5],[[1,6],4],[[1,5],4],[[1,2],6],[[1,2],5],[[1,2,6],4],[[1,2,5],4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],0,0,0,0,0,0,0,0,0,0,[[1,7],8],[[1,7],9],[[1,[10,[6]]],4],[[1,7,6],4],[[1,7,5],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],11],[[11,12],13],[-1,-1,[]],[11,5],[11,6],[-1,-2,[],[]],[[11,5],4],[[11,6],4],[11,4],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[[2,5],2],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],4,[],[]],[[],2],[[2,2],16],[[2,12],13],[[[4,[6,5]]],2],[17,2],[-1,-1,[]],[2,5],[2,6],[-1,-2,[],[]],[[2,5],4],[[2,6],4],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],1],[[1,12],13],[-1,-1,[]],[1,6],[-1,-2,[],[]],0,0,0,0,[[1,6],4],[-1,18,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,[[],19],[[19,19],19],[[19,19],-1,[]],[[19,19],4],[[19,19],-1,[]],[[19,19],4],[19,6],[[19,19],-1,[]],[[19,19],4],[-1,-2,[],[]],[-1,-2,[],[]],[19,4],[19,4],[19,4],[19,4],[19,4],[[19,6],4],[19,4],[19,4],[19,4],[19,19],[[-1,-2],4,[],[]],[[19,19],20],[[19,19],16],[[19,6],16],[[19,19],16],[[19,12],13],[[19,12],13],[[19,12],13],[[19,12],13],[[19,12],13],[-1,-1,[]],[6,19],[[],19],[[19,-1],4,21],[[19,19],16],[-1,-2,[],[]],[19,16],[19,16],[19,16],[19,16],[19,16],[19,16],[19,16],[19,16],[19,16],[[],19],[19,-1,[]],[19,19],[[19,19],19],[[19,19],[[22,[20]]]],[19,4],[19,4],[19,4],[19,4],[19,4],[[19,6],4],[19,4],[19,4],[19,4],[-1,-2,[],[]],[19,19],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[[19,19],19]],"c":[],"p":[[5,"State",348],[5,"SnesAddress",327],[1,"u32"],[1,"tuple"],[1,"u16"],[1,"u8"],[8,"Address",297],[8,"Byte",297],[8,"Word",297],[5,"Vec",446],[5,"MultiRegister",312],[5,"Formatter",447],[8,"Result",447],[6,"Result",448],[5,"TypeId",449],[1,"bool"],[1,"usize"],[5,"String",450],[5,"Status",371],[6,"Ordering",451],[10,"Hasher",452],[6,"Option",453]],"b":[[336,"impl-From%3C(u8,+u16)%3E-for-SnesAddress"],[337,"impl-From%3Cusize%3E-for-SnesAddress"],[404,"impl-PartialEq%3Cu8%3E-for-Status"],[405,"impl-PartialEq-for-Status"],[406,"impl-Binary-for-Status"],[407,"impl-UpperHex-for-Status"],[408,"impl-LowerHex-for-Status"],[409,"impl-Octal-for-Status"],[410,"impl-Debug-for-Status"],[427,"impl-Not-for-Status"],[428,"impl-Status"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
